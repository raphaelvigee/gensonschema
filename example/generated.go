package gen

// Code generated by github.com/raphaelvigee/gensonschema. DO NOT EDIT!

import (
	"bytes"
	"encoding/json"
	"strconv"
	"sync/atomic"
	"unsafe"

	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

func pathJoin(p1, p2 string) string {
	if p1 == "" {
		return p2
	}

	return p1 + "." + p2
}

type __delegate interface {
	typeDefaultJson() []byte
}

type __data struct {
	_json string
	_c    atomic.Uint64
}

type __node_interface interface {
	currentJson() string
}

type __node[D __delegate] struct {
	_data *__data
	_path string

	_parent __node_interface
	_ppath  string

	_rc    uint64
	_rjson string
}

// https://www.reddit.com/r/golang/comments/14xvgoj/converting_string_byte/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button
func (r __node[D]) unsafeGetBytes(s string) []byte {
	return unsafe.Slice(unsafe.StringData(s), len(s))
}

func (r __node[D]) unsafeGetString(b []byte) string {
	return unsafe.String(unsafe.SliceData(b), len(b))
}

func (r __node[D]) currentJsonb() []byte {
	return r.unsafeGetBytes(r.currentJson())
}

func (r __node[D]) currentJson() string {
	if r._path == "" {
		return r.json()
	}

	if r._rjson != "" && r._rc > 0 && r._rc == r._data._c.Load() {
		return r._rjson
	}

	res := r.result()

	r._rc = r._data._c.Load()
	r._rjson = res.Raw

	return r._rjson
}

func (r __node[D]) MarshalJSON() ([]byte, error) {
	return r.JSON(), nil
}

func (r __node[D]) JSON() []byte {
	return r.currentJsonb()
}

func (r *__node[D]) newData(b string) *__data {
	return &__data{_json: b, _c: atomic.Uint64{}}
}

func (r *__node[D]) UnmarshalJSON(b []byte) error {
	if r._data != nil {
		if r._path == "" {
			r.setJson(r.unsafeGetString(b))
			return nil
		}

		njson, err := sjson.SetRaw(r.json(), r.path(), string(b))
		if err != nil {
			return err
		}
		r.setJson(njson)
		return nil
	}

	*r = __node[D]{_data: r.newData(r.unsafeGetString(b))}
	return nil
}

func (r __node[D]) json() string {
	if r._data == nil {
		return string(r.defaultJson())
	}

	return r._data._json
}

func (r __node[D]) path() string {
	return r._path
}

func (r __node[D]) setJson(v string) {
	r._data._json = v
	r._data._c.Add(1)
}

func (r *__node[D]) ensureJson() {
	if r._data != nil {
		return
	}

	b := r.json()
	r._data = r.newData(b)
}

func (r __node[D]) result() gjson.Result {
	if parent := r._parent; parent != nil {
		return gjson.Get(parent.currentJson(), r._ppath)
	}

	if r._path == "" {
		return gjson.Parse(r.json())
	}
	return gjson.Get(r.json(), r.path())
}

func (r __node[D]) Exists() bool {
	return r.result().Exists()
}

func (r __node[D]) Delete() error {
	res, err := sjson.Delete(r.json(), r.path())
	if err != nil {
		return err
	}
	r.setJson(res)
	return nil
}

func (r *__node[D]) setb(incoming []byte) error {
	return r.set(r.unsafeGetString(incoming))
}

func (r *__node[D]) set(incoming string) error {
	r.ensureJson()

	if r._path == "" {
		r.setJson(incoming)
		return nil
	}

	res, err := sjson.SetRaw(r.json(), r.path(), incoming)
	if err != nil {
		return err
	}
	r.setJson(res)
	return nil
}

func (r *__node[D]) setMerge(incoming string) error {
	current := r.currentJson()

	var buf bytes.Buffer
	buf.Grow(len(current) + len(incoming) + 3)
	buf.WriteByte('[')
	buf.WriteString(current)
	buf.WriteByte(',')
	buf.WriteString(incoming)
	buf.WriteByte(']')

	incoming2 := gjson.GetBytes(buf.Bytes(), "@join").Raw

	return r.set(incoming2)
}

func (r __node[D]) copy() __node[D] {
	j := r.currentJson()

	return __node[D]{
		_data: r.newData(j),
	}
}

func (r __node[D]) defaultJson() []byte {
	var d D
	return d.typeDefaultJson()
}

type AllOf struct {
	__node[AllOf]
}

func (r AllOf) Set(v *AllOf) error {
	incoming := v.currentJson()

	return r.set(incoming)
}

func (r *AllOf) GetBilling_address() *AllofDefinitionsAddress {
	r.ensureJson()
	return &AllofDefinitionsAddress{
		__node[AllofDefinitionsAddress]{
			_data:   r._data,
			_path:   pathJoin(r._path, "billing_address"),
			_parent: r.__node,
			_ppath:  "billing_address",
		},
	}
}

func (r *AllOf) GetShipping_address() *AllofShipping_address {
	r.ensureJson()
	return &AllofShipping_address{
		__node[AllofShipping_address]{
			_data:   r._data,
			_path:   pathJoin(r._path, "shipping_address"),
			_parent: r.__node,
			_ppath:  "shipping_address",
		},
	}
}

func (r AllOf) Copy() *AllOf {
	return &AllOf{
		__node: r.copy(),
	}
}

func (r AllOf) typeDefaultJson() []byte {
	return []byte("{}")
}

type AllOfOneOf struct {
	__node[AllOfOneOf]
}

func (r AllOfOneOf) Set(v *AllOfOneOf) error {
	incoming := v.currentJson()

	return r.set(incoming)
}

func (r *AllOfOneOf) GetData() *AllofoneofData {
	r.ensureJson()
	return &AllofoneofData{
		__node[AllofoneofData]{
			_data:   r._data,
			_path:   pathJoin(r._path, "data"),
			_parent: r.__node,
			_ppath:  "data",
		},
	}
}

func (r AllOfOneOf) Copy() *AllOfOneOf {
	return &AllOfOneOf{
		__node: r.copy(),
	}
}

func (r AllOfOneOf) typeDefaultJson() []byte {
	return []byte("{}")
}

type AllofDefinitionsAddress struct {
	__node[AllofDefinitionsAddress]
}

func (r AllofDefinitionsAddress) Set(v *AllofDefinitionsAddress) error {
	incoming := v.currentJson()

	return r.set(incoming)
}

func (r *AllofDefinitionsAddress) GetCity() *String {
	r.ensureJson()
	return &String{
		__node[String]{
			_data:   r._data,
			_path:   pathJoin(r._path, "city"),
			_parent: r.__node,
			_ppath:  "city",
		},
	}
}

func (r AllofDefinitionsAddress) Copy() *AllofDefinitionsAddress {
	return &AllofDefinitionsAddress{
		__node: r.copy(),
	}
}

func (r AllofDefinitionsAddress) typeDefaultJson() []byte {
	return []byte("{}")
}

type AllofShipping_address struct {
	__node[AllofShipping_address]
}

func (r AllofShipping_address) Set(v *AllofShipping_address) error {
	incoming := v.currentJson()

	return r.setMerge(incoming)
}

func (r *AllofShipping_address) GetCity() *String {
	r.ensureJson()
	return &String{
		__node[String]{
			_data:   r._data,
			_path:   pathJoin(r._path, "city"),
			_parent: r.__node,
			_ppath:  "city",
		},
	}
}

func (r *AllofShipping_address) GetType() *String {
	r.ensureJson()
	return &String{
		__node[String]{
			_data:   r._data,
			_path:   pathJoin(r._path, "type"),
			_parent: r.__node,
			_ppath:  "type",
		},
	}
}

func (r AllofShipping_address) Copy() *AllofShipping_address {
	return &AllofShipping_address{
		__node: r.copy(),
	}
}

func (r AllofShipping_address) typeDefaultJson() []byte {
	return []byte("{}")
}

type AllofoneofData struct {
	__node[AllofoneofData]
}

func (r AllofoneofData) Set(v *AllofoneofData) error {
	incoming := v.currentJson()

	return r.setMerge(incoming)
}

func (r *AllofoneofData) AsAllOf0OneOf0() *AllofoneofDataAllOf0OneOf0 {
	r.ensureJson()
	return &AllofoneofDataAllOf0OneOf0{
		__node[AllofoneofDataAllOf0OneOf0]{
			_data:   r._data,
			_path:   r._path,
			_parent: r._parent,
			_ppath:  r._ppath,
		},
	}
}

func (r *AllofoneofData) AsAllOf0OneOf1() *AllofoneofDataAllOf0OneOf1 {
	r.ensureJson()
	return &AllofoneofDataAllOf0OneOf1{
		__node[AllofoneofDataAllOf0OneOf1]{
			_data:   r._data,
			_path:   r._path,
			_parent: r._parent,
			_ppath:  r._ppath,
		},
	}
}

func (r *AllofoneofData) AsAllOf3OneOf1() *AllofoneofDataAllOf3OneOf1 {
	r.ensureJson()
	return &AllofoneofDataAllOf3OneOf1{
		__node[AllofoneofDataAllOf3OneOf1]{
			_data:   r._data,
			_path:   r._path,
			_parent: r._parent,
			_ppath:  r._ppath,
		},
	}
}

func (r *AllofoneofData) AsDNestedTitle1() *DNestedTitle1 {
	r.ensureJson()
	return &DNestedTitle1{
		__node[DNestedTitle1]{
			_data:   r._data,
			_path:   r._path,
			_parent: r._parent,
			_ppath:  r._ppath,
		},
	}
}

func (r *AllofoneofData) AsNamedOneOf0() *AllofoneofDataAllOf2OneOf0 {
	r.ensureJson()
	return &AllofoneofDataAllOf2OneOf0{
		__node[AllofoneofDataAllOf2OneOf0]{
			_data:   r._data,
			_path:   r._path,
			_parent: r._parent,
			_ppath:  r._ppath,
		},
	}
}

func (r *AllofoneofData) AsNamedOneOf1() *AllofoneofDataAllOf2OneOf1 {
	r.ensureJson()
	return &AllofoneofDataAllOf2OneOf1{
		__node[AllofoneofDataAllOf2OneOf1]{
			_data:   r._data,
			_path:   r._path,
			_parent: r._parent,
			_ppath:  r._ppath,
		},
	}
}

func (r *AllofoneofData) GetB() *String {
	r.ensureJson()
	return &String{
		__node[String]{
			_data:   r._data,
			_path:   pathJoin(r._path, "b"),
			_parent: r.__node,
			_ppath:  "b",
		},
	}
}

func (r AllofoneofData) Copy() *AllofoneofData {
	return &AllofoneofData{
		__node: r.copy(),
	}
}

func (r AllofoneofData) typeDefaultJson() []byte {
	return []byte("{}")
}

type AllofoneofDataAllOf0OneOf0 struct {
	__node[AllofoneofDataAllOf0OneOf0]
}

func (r AllofoneofDataAllOf0OneOf0) Set(v *AllofoneofDataAllOf0OneOf0) error {
	incoming := v.currentJson()

	return r.set(incoming)
}

func (r *AllofoneofDataAllOf0OneOf0) GetA1() *String {
	r.ensureJson()
	return &String{
		__node[String]{
			_data:   r._data,
			_path:   pathJoin(r._path, "a1"),
			_parent: r.__node,
			_ppath:  "a1",
		},
	}
}

func (r AllofoneofDataAllOf0OneOf0) Copy() *AllofoneofDataAllOf0OneOf0 {
	return &AllofoneofDataAllOf0OneOf0{
		__node: r.copy(),
	}
}

func (r AllofoneofDataAllOf0OneOf0) typeDefaultJson() []byte {
	return []byte("{}")
}

type AllofoneofDataAllOf0OneOf1 struct {
	__node[AllofoneofDataAllOf0OneOf1]
}

func (r AllofoneofDataAllOf0OneOf1) Set(v *AllofoneofDataAllOf0OneOf1) error {
	incoming := v.currentJson()

	return r.set(incoming)
}

func (r *AllofoneofDataAllOf0OneOf1) GetA2() *String {
	r.ensureJson()
	return &String{
		__node[String]{
			_data:   r._data,
			_path:   pathJoin(r._path, "a2"),
			_parent: r.__node,
			_ppath:  "a2",
		},
	}
}

func (r AllofoneofDataAllOf0OneOf1) Copy() *AllofoneofDataAllOf0OneOf1 {
	return &AllofoneofDataAllOf0OneOf1{
		__node: r.copy(),
	}
}

func (r AllofoneofDataAllOf0OneOf1) typeDefaultJson() []byte {
	return []byte("{}")
}

type AllofoneofDataAllOf2OneOf0 struct {
	__node[AllofoneofDataAllOf2OneOf0]
}

func (r AllofoneofDataAllOf2OneOf0) Set(v *AllofoneofDataAllOf2OneOf0) error {
	incoming := v.currentJson()

	return r.set(incoming)
}

func (r *AllofoneofDataAllOf2OneOf0) GetC1() *String {
	r.ensureJson()
	return &String{
		__node[String]{
			_data:   r._data,
			_path:   pathJoin(r._path, "c1"),
			_parent: r.__node,
			_ppath:  "c1",
		},
	}
}

func (r AllofoneofDataAllOf2OneOf0) Copy() *AllofoneofDataAllOf2OneOf0 {
	return &AllofoneofDataAllOf2OneOf0{
		__node: r.copy(),
	}
}

func (r AllofoneofDataAllOf2OneOf0) typeDefaultJson() []byte {
	return []byte("{}")
}

type AllofoneofDataAllOf2OneOf1 struct {
	__node[AllofoneofDataAllOf2OneOf1]
}

func (r AllofoneofDataAllOf2OneOf1) Set(v *AllofoneofDataAllOf2OneOf1) error {
	incoming := v.currentJson()

	return r.set(incoming)
}

func (r *AllofoneofDataAllOf2OneOf1) GetC2() *String {
	r.ensureJson()
	return &String{
		__node[String]{
			_data:   r._data,
			_path:   pathJoin(r._path, "c2"),
			_parent: r.__node,
			_ppath:  "c2",
		},
	}
}

func (r AllofoneofDataAllOf2OneOf1) Copy() *AllofoneofDataAllOf2OneOf1 {
	return &AllofoneofDataAllOf2OneOf1{
		__node: r.copy(),
	}
}

func (r AllofoneofDataAllOf2OneOf1) typeDefaultJson() []byte {
	return []byte("{}")
}

type AllofoneofDataAllOf3OneOf1 struct {
	__node[AllofoneofDataAllOf3OneOf1]
}

func (r AllofoneofDataAllOf3OneOf1) Set(v *AllofoneofDataAllOf3OneOf1) error {
	incoming := v.currentJson()

	return r.set(incoming)
}

func (r *AllofoneofDataAllOf3OneOf1) GetD2() *String {
	r.ensureJson()
	return &String{
		__node[String]{
			_data:   r._data,
			_path:   pathJoin(r._path, "d2"),
			_parent: r.__node,
			_ppath:  "d2",
		},
	}
}

func (r AllofoneofDataAllOf3OneOf1) Copy() *AllofoneofDataAllOf3OneOf1 {
	return &AllofoneofDataAllOf3OneOf1{
		__node: r.copy(),
	}
}

func (r AllofoneofDataAllOf3OneOf1) typeDefaultJson() []byte {
	return []byte("{}")
}

type ArrayArray struct {
	__node[ArrayArray]
}

func (r ArrayArray) Set(v *ArrayArray) error {
	incoming := v.currentJson()

	return r.set(incoming)
}

func (r *ArrayArray) GetTopfield1() *ArrayTopfield1 {
	r.ensureJson()
	return &ArrayTopfield1{
		__node[ArrayTopfield1]{
			_data:   r._data,
			_path:   pathJoin(r._path, "topfield1"),
			_parent: r.__node,
			_ppath:  "topfield1",
		},
	}
}

func (r *ArrayArray) GetTopfield2() *ArrayTopfield2 {
	r.ensureJson()
	return &ArrayTopfield2{
		__node[ArrayTopfield2]{
			_data:   r._data,
			_path:   pathJoin(r._path, "topfield2"),
			_parent: r.__node,
			_ppath:  "topfield2",
		},
	}
}

func (r ArrayArray) Copy() *ArrayArray {
	return &ArrayArray{
		__node: r.copy(),
	}
}

func (r ArrayArray) typeDefaultJson() []byte {
	return []byte("{}")
}

type ArrayDefinitionsDef1 struct {
	__node[ArrayDefinitionsDef1]
}

func (r ArrayDefinitionsDef1) Set(v *ArrayDefinitionsDef1) error {
	incoming := v.currentJson()

	return r.set(incoming)
}

func (r *ArrayDefinitionsDef1) GetField1() *String {
	r.ensureJson()
	return &String{
		__node[String]{
			_data:   r._data,
			_path:   pathJoin(r._path, "field1"),
			_parent: r.__node,
			_ppath:  "field1",
		},
	}
}

func (r *ArrayDefinitionsDef1) GetField2() *String {
	r.ensureJson()
	return &String{
		__node[String]{
			_data:   r._data,
			_path:   pathJoin(r._path, "field2"),
			_parent: r.__node,
			_ppath:  "field2",
		},
	}
}

func (r ArrayDefinitionsDef1) Copy() *ArrayDefinitionsDef1 {
	return &ArrayDefinitionsDef1{
		__node: r.copy(),
	}
}

func (r ArrayDefinitionsDef1) typeDefaultJson() []byte {
	return []byte("{}")
}

type ArrayTopfield1 struct {
	__node[ArrayTopfield1]
}

func (r ArrayTopfield1) Set(v *ArrayTopfield1) error {
	incoming := v.currentJson()

	return r.set(incoming)
}

func (r *ArrayTopfield1) Append(v *ArrayDefinitionsDef1) error {
	r.ensureJson()
	return r.At(-1).Set(v)
}

func (r *ArrayTopfield1) At(i int) *ArrayDefinitionsDef1 {
	r.ensureJson()
	return &ArrayDefinitionsDef1{
		__node[ArrayDefinitionsDef1]{
			_data:   r._data,
			_path:   pathJoin(r._path, strconv.Itoa(i)),
			_parent: r.__node,
			_ppath:  strconv.Itoa(i),
		},
	}
}

func (r ArrayTopfield1) Clear() error {
	return r.set("[]")
}

func (r ArrayTopfield1) Len() int {
	res := r.result()
	if !res.IsArray() {
		return 0
	}
	return int(res.Get("#").Int())
}

func (r ArrayTopfield1) Range() func(yield func(int, *ArrayDefinitionsDef1) bool) {
	return func(yield func(int, *ArrayDefinitionsDef1) bool) {
		l := r.Len()

		for i := 0; i < l; i++ {
			v := r.At(i)

			if !yield(i, v) {
				break
			}
		}
	}
}

func (r ArrayTopfield1) Copy() *ArrayTopfield1 {
	return &ArrayTopfield1{
		__node: r.copy(),
	}
}

func (r ArrayTopfield1) typeDefaultJson() []byte {
	return []byte("[]")
}

type ArrayTopfield2 struct {
	__node[ArrayTopfield2]
}

func (r ArrayTopfield2) Value() []string {
	res := r.result()
	var v []string
	_ = json.Unmarshal([]byte(res.Raw), &v)
	return v
}
func (r *ArrayTopfield2) Append(v string) error {
	r.ensureJson()
	return r.At(-1).Set(v)
}

func (r *ArrayTopfield2) At(i int) *String {
	r.ensureJson()
	return &String{
		__node[String]{
			_data:   r._data,
			_path:   pathJoin(r._path, strconv.Itoa(i)),
			_parent: r.__node,
			_ppath:  strconv.Itoa(i),
		},
	}
}

func (r *ArrayTopfield2) Set(v []string) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	return r.setb(b)
}

func (r ArrayTopfield2) Clear() error {
	return r.set("[]")
}

func (r ArrayTopfield2) Len() int {
	res := r.result()
	if !res.IsArray() {
		return 0
	}
	return int(res.Get("#").Int())
}

func (r ArrayTopfield2) Range() func(yield func(int, *String) bool) {
	return func(yield func(int, *String) bool) {
		l := r.Len()

		for i := 0; i < l; i++ {
			v := r.At(i)

			if !yield(i, v) {
				break
			}
		}
	}
}

func (r ArrayTopfield2) Copy() *ArrayTopfield2 {
	return &ArrayTopfield2{
		__node: r.copy(),
	}
}

func (r ArrayTopfield2) typeDefaultJson() []byte {
	return []byte("[]")
}

type ArraysSchemaArraysSchema struct {
	__node[ArraysSchemaArraysSchema]
}

func (r ArraysSchemaArraysSchema) Set(v *ArraysSchemaArraysSchema) error {
	incoming := v.currentJson()

	return r.set(incoming)
}

func (r *ArraysSchemaArraysSchema) GetFruits() *ArraysSchemaFruits {
	r.ensureJson()
	return &ArraysSchemaFruits{
		__node[ArraysSchemaFruits]{
			_data:   r._data,
			_path:   pathJoin(r._path, "fruits"),
			_parent: r.__node,
			_ppath:  "fruits",
		},
	}
}

func (r *ArraysSchemaArraysSchema) GetVegetables() *ArraysSchemaVegetables {
	r.ensureJson()
	return &ArraysSchemaVegetables{
		__node[ArraysSchemaVegetables]{
			_data:   r._data,
			_path:   pathJoin(r._path, "vegetables"),
			_parent: r.__node,
			_ppath:  "vegetables",
		},
	}
}

func (r ArraysSchemaArraysSchema) Copy() *ArraysSchemaArraysSchema {
	return &ArraysSchemaArraysSchema{
		__node: r.copy(),
	}
}

func (r ArraysSchemaArraysSchema) typeDefaultJson() []byte {
	return []byte("{}")
}

type ArraysSchemaDefsVeggie struct {
	__node[ArraysSchemaDefsVeggie]
}

func (r ArraysSchemaDefsVeggie) Set(v *ArraysSchemaDefsVeggie) error {
	incoming := v.currentJson()

	return r.set(incoming)
}

func (r *ArraysSchemaDefsVeggie) GetVeggieLike() *Bool {
	r.ensureJson()
	return &Bool{
		__node[Bool]{
			_data:   r._data,
			_path:   pathJoin(r._path, "veggieLike"),
			_parent: r.__node,
			_ppath:  "veggieLike",
		},
	}
}

func (r *ArraysSchemaDefsVeggie) GetVeggieName() *String {
	r.ensureJson()
	return &String{
		__node[String]{
			_data:   r._data,
			_path:   pathJoin(r._path, "veggieName"),
			_parent: r.__node,
			_ppath:  "veggieName",
		},
	}
}

func (r ArraysSchemaDefsVeggie) Copy() *ArraysSchemaDefsVeggie {
	return &ArraysSchemaDefsVeggie{
		__node: r.copy(),
	}
}

func (r ArraysSchemaDefsVeggie) typeDefaultJson() []byte {
	return []byte("{}")
}

type ArraysSchemaFruits struct {
	__node[ArraysSchemaFruits]
}

func (r ArraysSchemaFruits) Value() []string {
	res := r.result()
	var v []string
	_ = json.Unmarshal([]byte(res.Raw), &v)
	return v
}
func (r *ArraysSchemaFruits) Append(v string) error {
	r.ensureJson()
	return r.At(-1).Set(v)
}

func (r *ArraysSchemaFruits) At(i int) *String {
	r.ensureJson()
	return &String{
		__node[String]{
			_data:   r._data,
			_path:   pathJoin(r._path, strconv.Itoa(i)),
			_parent: r.__node,
			_ppath:  strconv.Itoa(i),
		},
	}
}

func (r *ArraysSchemaFruits) Set(v []string) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	return r.setb(b)
}

func (r ArraysSchemaFruits) Clear() error {
	return r.set("[]")
}

func (r ArraysSchemaFruits) Len() int {
	res := r.result()
	if !res.IsArray() {
		return 0
	}
	return int(res.Get("#").Int())
}

func (r ArraysSchemaFruits) Range() func(yield func(int, *String) bool) {
	return func(yield func(int, *String) bool) {
		l := r.Len()

		for i := 0; i < l; i++ {
			v := r.At(i)

			if !yield(i, v) {
				break
			}
		}
	}
}

func (r ArraysSchemaFruits) Copy() *ArraysSchemaFruits {
	return &ArraysSchemaFruits{
		__node: r.copy(),
	}
}

func (r ArraysSchemaFruits) typeDefaultJson() []byte {
	return []byte("[]")
}

type ArraysSchemaVegetables struct {
	__node[ArraysSchemaVegetables]
}

func (r ArraysSchemaVegetables) Set(v *ArraysSchemaVegetables) error {
	incoming := v.currentJson()

	return r.set(incoming)
}

func (r *ArraysSchemaVegetables) Append(v *ArraysSchemaDefsVeggie) error {
	r.ensureJson()
	return r.At(-1).Set(v)
}

func (r *ArraysSchemaVegetables) At(i int) *ArraysSchemaDefsVeggie {
	r.ensureJson()
	return &ArraysSchemaDefsVeggie{
		__node[ArraysSchemaDefsVeggie]{
			_data:   r._data,
			_path:   pathJoin(r._path, strconv.Itoa(i)),
			_parent: r.__node,
			_ppath:  strconv.Itoa(i),
		},
	}
}

func (r ArraysSchemaVegetables) Clear() error {
	return r.set("[]")
}

func (r ArraysSchemaVegetables) Len() int {
	res := r.result()
	if !res.IsArray() {
		return 0
	}
	return int(res.Get("#").Int())
}

func (r ArraysSchemaVegetables) Range() func(yield func(int, *ArraysSchemaDefsVeggie) bool) {
	return func(yield func(int, *ArraysSchemaDefsVeggie) bool) {
		l := r.Len()

		for i := 0; i < l; i++ {
			v := r.At(i)

			if !yield(i, v) {
				break
			}
		}
	}
}

func (r ArraysSchemaVegetables) Copy() *ArraysSchemaVegetables {
	return &ArraysSchemaVegetables{
		__node: r.copy(),
	}
}

func (r ArraysSchemaVegetables) typeDefaultJson() []byte {
	return []byte("[]")
}

type Bool struct {
	__node[Bool]
}

func (r Bool) Value() bool {
	res := r.result()
	return res.Bool()
}
func (r *Bool) Set(v bool) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	return r.setb(b)
}

func (r Bool) Copy() *Bool {
	return &Bool{
		__node: r.copy(),
	}
}

func (r Bool) typeDefaultJson() []byte {
	return []byte("")
}

type DNestedTitle1 struct {
	__node[DNestedTitle1]
}

func (r DNestedTitle1) Set(v *DNestedTitle1) error {
	incoming := v.currentJson()

	return r.set(incoming)
}

func (r *DNestedTitle1) GetD1() *String {
	r.ensureJson()
	return &String{
		__node[String]{
			_data:   r._data,
			_path:   pathJoin(r._path, "d1"),
			_parent: r.__node,
			_ppath:  "d1",
		},
	}
}

func (r DNestedTitle1) Copy() *DNestedTitle1 {
	return &DNestedTitle1{
		__node: r.copy(),
	}
}

func (r DNestedTitle1) typeDefaultJson() []byte {
	return []byte("{}")
}

type Float64 struct {
	__node[Float64]
}

func (r Float64) Value() float64 {
	res := r.result()
	return res.Float()
}
func (r *Float64) Set(v float64) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	return r.setb(b)
}

func (r Float64) Copy() *Float64 {
	return &Float64{
		__node: r.copy(),
	}
}

func (r Float64) typeDefaultJson() []byte {
	return []byte("")
}

type Int64 struct {
	__node[Int64]
}

func (r Int64) Value() int64 {
	res := r.result()
	return res.Int()
}
func (r *Int64) Set(v int64) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	return r.setb(b)
}

func (r Int64) Copy() *Int64 {
	return &Int64{
		__node: r.copy(),
	}
}

func (r Int64) typeDefaultJson() []byte {
	return []byte("")
}

type LargeFileItems struct {
	__node[LargeFileItems]
}

func (r LargeFileItems) Set(v *LargeFileItems) error {
	incoming := v.currentJson()

	return r.set(incoming)
}

func (r *LargeFileItems) GetActor() *LargeFileItemsActor {
	r.ensureJson()
	return &LargeFileItemsActor{
		__node[LargeFileItemsActor]{
			_data:   r._data,
			_path:   pathJoin(r._path, "actor"),
			_parent: r.__node,
			_ppath:  "actor",
		},
	}
}

func (r *LargeFileItems) GetId() *String {
	r.ensureJson()
	return &String{
		__node[String]{
			_data:   r._data,
			_path:   pathJoin(r._path, "id"),
			_parent: r.__node,
			_ppath:  "id",
		},
	}
}

func (r *LargeFileItems) GetType() *String {
	r.ensureJson()
	return &String{
		__node[String]{
			_data:   r._data,
			_path:   pathJoin(r._path, "type"),
			_parent: r.__node,
			_ppath:  "type",
		},
	}
}

func (r LargeFileItems) Copy() *LargeFileItems {
	return &LargeFileItems{
		__node: r.copy(),
	}
}

func (r LargeFileItems) typeDefaultJson() []byte {
	return []byte("{}")
}

type LargeFileItemsActor struct {
	__node[LargeFileItemsActor]
}

func (r LargeFileItemsActor) Set(v *LargeFileItemsActor) error {
	incoming := v.currentJson()

	return r.set(incoming)
}

func (r *LargeFileItemsActor) GetAvatar_url() *String {
	r.ensureJson()
	return &String{
		__node[String]{
			_data:   r._data,
			_path:   pathJoin(r._path, "avatar_url"),
			_parent: r.__node,
			_ppath:  "avatar_url",
		},
	}
}

func (r *LargeFileItemsActor) GetGravatar_id() *String {
	r.ensureJson()
	return &String{
		__node[String]{
			_data:   r._data,
			_path:   pathJoin(r._path, "gravatar_id"),
			_parent: r.__node,
			_ppath:  "gravatar_id",
		},
	}
}

func (r *LargeFileItemsActor) GetId() *Float64 {
	r.ensureJson()
	return &Float64{
		__node[Float64]{
			_data:   r._data,
			_path:   pathJoin(r._path, "id"),
			_parent: r.__node,
			_ppath:  "id",
		},
	}
}

func (r *LargeFileItemsActor) GetLogin() *String {
	r.ensureJson()
	return &String{
		__node[String]{
			_data:   r._data,
			_path:   pathJoin(r._path, "login"),
			_parent: r.__node,
			_ppath:  "login",
		},
	}
}

func (r *LargeFileItemsActor) GetUrl() *String {
	r.ensureJson()
	return &String{
		__node[String]{
			_data:   r._data,
			_path:   pathJoin(r._path, "url"),
			_parent: r.__node,
			_ppath:  "url",
		},
	}
}

func (r LargeFileItemsActor) Copy() *LargeFileItemsActor {
	return &LargeFileItemsActor{
		__node: r.copy(),
	}
}

func (r LargeFileItemsActor) typeDefaultJson() []byte {
	return []byte("{}")
}

type LargeFileLargeFile struct {
	__node[LargeFileLargeFile]
}

func (r LargeFileLargeFile) Set(v *LargeFileLargeFile) error {
	incoming := v.currentJson()

	return r.set(incoming)
}

func (r *LargeFileLargeFile) Append(v *LargeFileItems) error {
	r.ensureJson()
	return r.At(-1).Set(v)
}

func (r *LargeFileLargeFile) At(i int) *LargeFileItems {
	r.ensureJson()
	return &LargeFileItems{
		__node[LargeFileItems]{
			_data:   r._data,
			_path:   pathJoin(r._path, strconv.Itoa(i)),
			_parent: r.__node,
			_ppath:  strconv.Itoa(i),
		},
	}
}

func (r LargeFileLargeFile) Clear() error {
	return r.set("[]")
}

func (r LargeFileLargeFile) Len() int {
	res := r.result()
	if !res.IsArray() {
		return 0
	}
	return int(res.Get("#").Int())
}

func (r LargeFileLargeFile) Range() func(yield func(int, *LargeFileItems) bool) {
	return func(yield func(int, *LargeFileItems) bool) {
		l := r.Len()

		for i := 0; i < l; i++ {
			v := r.At(i)

			if !yield(i, v) {
				break
			}
		}
	}
}

func (r LargeFileLargeFile) Copy() *LargeFileLargeFile {
	return &LargeFileLargeFile{
		__node: r.copy(),
	}
}

func (r LargeFileLargeFile) typeDefaultJson() []byte {
	return []byte("[]")
}

type NestedarraysField1 struct {
	__node[NestedarraysField1]
}

func (r NestedarraysField1) Set(v *NestedarraysField1) error {
	incoming := v.currentJson()

	return r.set(incoming)
}

func (r *NestedarraysField1) Append(v *NestedarraysField1Items) error {
	r.ensureJson()
	return r.At(-1).Set(v)
}

func (r *NestedarraysField1) At(i int) *NestedarraysField1Items {
	r.ensureJson()
	return &NestedarraysField1Items{
		__node[NestedarraysField1Items]{
			_data:   r._data,
			_path:   pathJoin(r._path, strconv.Itoa(i)),
			_parent: r.__node,
			_ppath:  strconv.Itoa(i),
		},
	}
}

func (r NestedarraysField1) Clear() error {
	return r.set("[]")
}

func (r NestedarraysField1) Len() int {
	res := r.result()
	if !res.IsArray() {
		return 0
	}
	return int(res.Get("#").Int())
}

func (r NestedarraysField1) Range() func(yield func(int, *NestedarraysField1Items) bool) {
	return func(yield func(int, *NestedarraysField1Items) bool) {
		l := r.Len()

		for i := 0; i < l; i++ {
			v := r.At(i)

			if !yield(i, v) {
				break
			}
		}
	}
}

func (r NestedarraysField1) Copy() *NestedarraysField1 {
	return &NestedarraysField1{
		__node: r.copy(),
	}
}

func (r NestedarraysField1) typeDefaultJson() []byte {
	return []byte("[]")
}

type NestedarraysField1Items struct {
	__node[NestedarraysField1Items]
}

func (r NestedarraysField1Items) Set(v *NestedarraysField1Items) error {
	incoming := v.currentJson()

	return r.set(incoming)
}

func (r *NestedarraysField1Items) GetField2() *NestedarraysField1ItemsField2 {
	r.ensureJson()
	return &NestedarraysField1ItemsField2{
		__node[NestedarraysField1ItemsField2]{
			_data:   r._data,
			_path:   pathJoin(r._path, "field2"),
			_parent: r.__node,
			_ppath:  "field2",
		},
	}
}

func (r NestedarraysField1Items) Copy() *NestedarraysField1Items {
	return &NestedarraysField1Items{
		__node: r.copy(),
	}
}

func (r NestedarraysField1Items) typeDefaultJson() []byte {
	return []byte("{}")
}

type NestedarraysField1ItemsField2 struct {
	__node[NestedarraysField1ItemsField2]
}

func (r NestedarraysField1ItemsField2) Set(v *NestedarraysField1ItemsField2) error {
	incoming := v.currentJson()

	return r.set(incoming)
}

func (r *NestedarraysField1ItemsField2) Append(v *SomeTitle) error {
	r.ensureJson()
	return r.At(-1).Set(v)
}

func (r *NestedarraysField1ItemsField2) At(i int) *SomeTitle {
	r.ensureJson()
	return &SomeTitle{
		__node[SomeTitle]{
			_data:   r._data,
			_path:   pathJoin(r._path, strconv.Itoa(i)),
			_parent: r.__node,
			_ppath:  strconv.Itoa(i),
		},
	}
}

func (r NestedarraysField1ItemsField2) Clear() error {
	return r.set("[]")
}

func (r NestedarraysField1ItemsField2) Len() int {
	res := r.result()
	if !res.IsArray() {
		return 0
	}
	return int(res.Get("#").Int())
}

func (r NestedarraysField1ItemsField2) Range() func(yield func(int, *SomeTitle) bool) {
	return func(yield func(int, *SomeTitle) bool) {
		l := r.Len()

		for i := 0; i < l; i++ {
			v := r.At(i)

			if !yield(i, v) {
				break
			}
		}
	}
}

func (r NestedarraysField1ItemsField2) Copy() *NestedarraysField1ItemsField2 {
	return &NestedarraysField1ItemsField2{
		__node: r.copy(),
	}
}

func (r NestedarraysField1ItemsField2) typeDefaultJson() []byte {
	return []byte("[]")
}

type NestedarraysNestedarrays struct {
	__node[NestedarraysNestedarrays]
}

func (r NestedarraysNestedarrays) Set(v *NestedarraysNestedarrays) error {
	incoming := v.currentJson()

	return r.set(incoming)
}

func (r *NestedarraysNestedarrays) GetField1() *NestedarraysField1 {
	r.ensureJson()
	return &NestedarraysField1{
		__node[NestedarraysField1]{
			_data:   r._data,
			_path:   pathJoin(r._path, "field1"),
			_parent: r.__node,
			_ppath:  "field1",
		},
	}
}

func (r NestedarraysNestedarrays) Copy() *NestedarraysNestedarrays {
	return &NestedarraysNestedarrays{
		__node: r.copy(),
	}
}

func (r NestedarraysNestedarrays) typeDefaultJson() []byte {
	return []byte("{}")
}

type OneOf struct {
	__node[OneOf]
}

func (r OneOf) Set(v *OneOf) error {
	incoming := v.currentJson()

	return r.set(incoming)
}

func (r *OneOf) GetData() *OneofData {
	r.ensureJson()
	return &OneofData{
		__node[OneofData]{
			_data:   r._data,
			_path:   pathJoin(r._path, "data"),
			_parent: r.__node,
			_ppath:  "data",
		},
	}
}

func (r OneOf) Copy() *OneOf {
	return &OneOf{
		__node: r.copy(),
	}
}

func (r OneOf) typeDefaultJson() []byte {
	return []byte("{}")
}

type OneOfRootObj struct {
	__node[OneOfRootObj]
}

func (r OneOfRootObj) Set(v *OneOfRootObj) error {
	incoming := v.currentJson()

	return r.set(incoming)
}

func (r *OneOfRootObj) AsPerson() *Person {
	r.ensureJson()
	return &Person{
		__node[Person]{
			_data:   r._data,
			_path:   r._path,
			_parent: r._parent,
			_ppath:  r._ppath,
		},
	}
}

func (r *OneOfRootObj) AsVehicle() *Vehicle {
	r.ensureJson()
	return &Vehicle{
		__node[Vehicle]{
			_data:   r._data,
			_path:   r._path,
			_parent: r._parent,
			_ppath:  r._ppath,
		},
	}
}

func (r OneOfRootObj) Copy() *OneOfRootObj {
	return &OneOfRootObj{
		__node: r.copy(),
	}
}

func (r OneOfRootObj) typeDefaultJson() []byte {
	return []byte("{}")
}

type OneofData struct {
	__node[OneofData]
}

func (r OneofData) Set(v *OneofData) error {
	incoming := v.currentJson()

	return r.set(incoming)
}

func (r *OneofData) AsPerson() *Person {
	r.ensureJson()
	return &Person{
		__node[Person]{
			_data:   r._data,
			_path:   r._path,
			_parent: r._parent,
			_ppath:  r._ppath,
		},
	}
}

func (r *OneofData) AsVehicle() *Vehicle {
	r.ensureJson()
	return &Vehicle{
		__node[Vehicle]{
			_data:   r._data,
			_path:   r._path,
			_parent: r._parent,
			_ppath:  r._ppath,
		},
	}
}

func (r OneofData) Copy() *OneofData {
	return &OneofData{
		__node: r.copy(),
	}
}

func (r OneofData) typeDefaultJson() []byte {
	return []byte("{}")
}

type Person struct {
	__node[Person]
}

func (r Person) Set(v *Person) error {
	incoming := v.currentJson()

	return r.set(incoming)
}

func (r *Person) GetFirstName() *String {
	r.ensureJson()
	return &String{
		__node[String]{
			_data:   r._data,
			_path:   pathJoin(r._path, "firstName"),
			_parent: r.__node,
			_ppath:  "firstName",
		},
	}
}

func (r *Person) GetLastName() *String {
	r.ensureJson()
	return &String{
		__node[String]{
			_data:   r._data,
			_path:   pathJoin(r._path, "lastName"),
			_parent: r.__node,
			_ppath:  "lastName",
		},
	}
}

func (r *Person) GetSport() *String {
	r.ensureJson()
	return &String{
		__node[String]{
			_data:   r._data,
			_path:   pathJoin(r._path, "sport"),
			_parent: r.__node,
			_ppath:  "sport",
		},
	}
}

func (r Person) Copy() *Person {
	return &Person{
		__node: r.copy(),
	}
}

func (r Person) typeDefaultJson() []byte {
	return []byte("{}")
}

type SomeTitle struct {
	__node[SomeTitle]
}

func (r SomeTitle) Set(v *SomeTitle) error {
	incoming := v.currentJson()

	return r.set(incoming)
}

func (r *SomeTitle) GetField3() *String {
	r.ensureJson()
	return &String{
		__node[String]{
			_data:   r._data,
			_path:   pathJoin(r._path, "field3"),
			_parent: r.__node,
			_ppath:  "field3",
		},
	}
}

func (r SomeTitle) Copy() *SomeTitle {
	return &SomeTitle{
		__node: r.copy(),
	}
}

func (r SomeTitle) typeDefaultJson() []byte {
	return []byte("{}")
}

type String struct {
	__node[String]
}

func (r String) Value() string {
	res := r.result()
	return res.String()
}
func (r *String) Set(v string) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	return r.setb(b)
}

func (r String) Copy() *String {
	return &String{
		__node: r.copy(),
	}
}

func (r String) typeDefaultJson() []byte {
	return []byte("")
}

type Vehicle struct {
	__node[Vehicle]
}

func (r Vehicle) Set(v *Vehicle) error {
	incoming := v.currentJson()

	return r.set(incoming)
}

func (r *Vehicle) GetBrand() *String {
	r.ensureJson()
	return &String{
		__node[String]{
			_data:   r._data,
			_path:   pathJoin(r._path, "brand"),
			_parent: r.__node,
			_ppath:  "brand",
		},
	}
}

func (r *Vehicle) GetPrice() *Int64 {
	r.ensureJson()
	return &Int64{
		__node[Int64]{
			_data:   r._data,
			_path:   pathJoin(r._path, "price"),
			_parent: r.__node,
			_ppath:  "price",
		},
	}
}

func (r Vehicle) Copy() *Vehicle {
	return &Vehicle{
		__node: r.copy(),
	}
}

func (r Vehicle) typeDefaultJson() []byte {
	return []byte("{}")
}
