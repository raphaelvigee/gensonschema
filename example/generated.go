package gen

// Code generated by github.com/raphaelvigee/gensonschema. DO NOT EDIT!

import (
	"reflect"
	"slices"
	"sync/atomic"

	"github.com/ohler55/ojg/jp"
	"github.com/ohler55/ojg/oj"
)

type __delegate interface {
	typeDefaultJson() []byte
}

type __node_array[T any] interface {
	Len() int
	At(i int) T
}

type __data struct {
	_data any
	_c    atomic.Uint64
}

type __node_interface interface {
	ensureWritable() error
	result() any
	setv(any) error
	path() jp.Expr
	parent() __node_interface
	Exists() bool
	set([]byte) error
	defaultJson() []byte
}

type __node[D __delegate] struct {
	_data *__data
	_path jp.Expr

	_parent __node_interface

	_json  []byte
	_jsonc uint64
	// This exists because https://github.com/golang/go/issues/68919
	_setjson func(b []byte)
}

func node_path(from __node_interface) jp.Expr {
	if from.path() == nil {
		return jp.R()
	}

	return from.path()
}

func node_is_root(r __node_interface) bool {
	if len(r.path()) == 0 {
		return true
	}

	if len(r.path()) == 1 {
		_, ok := r.path()[0].(jp.Root)

		return ok
	}

	return false
}

func node_at[F, T __delegate](from *__node[F], n int) __node[T] {
	from.ensureData()

	return __node[T]{
		_data:   from._data,
		_path:   slices.Clone(node_path(from)).N(n),
		_parent: from,
	}
}

func node_get[F, T __delegate](from *__node[F], path string) __node[T] {
	from.ensureData()

	return __node[T]{
		_data:   from._data,
		_path:   slices.Clone(node_path(from)).C(path),
		_parent: from,
	}
}

func node_get_as[F, T __delegate](r *__node[F]) __node[T] {
	r.ensureData()

	return __node[T]{
		_data:   r._data,
		_path:   r._path,
		_parent: r._parent,
	}
}

func node_value_float(n __node_interface) float64 {
	v := reflect.ValueOf(n.result())
	if v.CanFloat() {
		return v.Float()
	}

	if v.CanInt() {
		return float64(v.Int())
	}

	if v.CanUint() {
		return float64(v.Uint())
	}

	return 0
}

func node_value_int(n __node_interface) int64 {
	v := reflect.ValueOf(n.result())
	if v.CanFloat() {
		return int64(v.Float())
	}

	if v.CanInt() {
		return v.Int()
	}

	if v.CanUint() {
		return int64(v.Uint())
	}

	return 0
}

func node_value_uint(n __node_interface) uint64 {
	v := reflect.ValueOf(n.result())
	if v.CanFloat() {
		return uint64(v.Float())
	}

	if v.CanInt() {
		return uint64(v.Int())
	}

	if v.CanUint() {
		return v.Uint()
	}

	return 0
}

func node_value_bool(n __node_interface) bool {
	v, _ := n.result().(bool)

	return v
}

func node_value_string(n __node_interface) string {
	v, _ := n.result().(string)

	return v
}

func node_array_range[T any](r __node_array[T]) func(yield func(int, T) bool) {
	return func(yield func(int, T) bool) {
		l := r.Len()

		for i := 0; i < l; i++ {
			v := r.At(i)

			if !yield(i, v) {
				break
			}
		}
	}
}

func node_array_len(r __node_interface) int {
	res, _ := r.result().([]any)

	return len(res)
}

func is_setting_array_index(r __node_interface) bool {
	if len(r.path()) >= 1 {
		maybeIndex := r.path()[len(r.path())-1]

		_, ok := maybeIndex.(jp.Nth)

		return ok
	}

	return false
}

func node_array_set(r __node_interface, v any) error {
	index := r.path()[len(r.path())-1].(jp.Nth)

	arr, _ := r.parent().result().([]any)
	if arr == nil {
		arr = make([]any, 0)
	}

	for i := len(arr); i <= int(index); i++ {
		arr = append(arr, nil)
	}

	arr[index] = v

	return r.parent().setv(arr)
}

func node_array_append_node(r, v __node_interface) error {
	return node_array_append(r, v.result())
}

func node_array_append(r __node_interface, v any) error {
	arr, _ := r.result().([]any)
	if arr == nil {
		arr = make([]any, 0)
	}
	arr = append(arr, v)

	return r.setv(arr)
}

func node_value_struct[T any](r __node_interface) T {
	data := r.result()

	b, err := oj.Marshal(data)
	if err != nil {
		panic(err)
	}

	var v T
	_ = oj.Unmarshal(b, &v)

	return v
}

func (r __node[D]) MarshalJSON() ([]byte, error) {
	if r._data != nil && r._jsonc == r._data._c.Load() {
		return r._json, nil
	}

	b, err := oj.Marshal(r.result(), &oj.Options{Sort: true})
	if err != nil {
		return nil, err
	}

	if setjson := r._setjson; setjson != nil {
		setjson(b)
	}

	return b, nil
}

func (r *__node[D]) JSON() []byte {
	b, _ := r.MarshalJSON()
	return b
}

// Deprecated: not useful anymore
func (r __node[D]) WithSafe(safe bool) __node[D] {
	return r
}

func (r *__node[D]) newData(b []byte) *__data {
	data, err := oj.Parse(b)
	if err != nil {
		panic(err)
	}

	var c atomic.Uint64
	c.Add(1)

	return &__data{_data: data, _c: c}
}

func (r *__node[D]) UnmarshalJSON(b []byte) error {
	return r.set(b)
}

func (r __node[D]) path() jp.Expr {
	return r._path
}

func (r __node[D]) parent() __node_interface {
	return r._parent
}

func (r __node[D]) Path() string {
	return r._path.String()
}

func (r *__node[D]) ensureData() {
	if r._data == nil {
		r._data = r.newData(r.defaultJson())
	}
}

func (r *__node[D]) ensureWritable() error {
	if parent := r._parent; parent != nil {
		if !parent.Exists() {
			err := parent.ensureWritable()
			if err != nil {
				return err
			}

			err = parent.set(parent.defaultJson())
			if err != nil {
				return err
			}
		}
	}

	return nil
}

func (r *__node[D]) result() any {
	r.ensureData()

	res := node_path(r).Get(r._data._data)
	if len(res) == 0 {
		return nil
	}

	return res[0]
}

func (r *__node[D]) Exists() bool {
	return node_path(r).Has(r._data._data)
}

func (r *__node[D]) Delete() error {
	val, err := node_path(r).RemoveOne(r._data._data)
	if err != nil {
		return err
	}

	r.setdata(val)

	return nil
}

func (r *__node[D]) set(incoming []byte) error {
	incomingv, err := oj.Parse(incoming)
	if err != nil {
		return err
	}

	return r.setvb(incomingv, incoming)
}

func (r *__node[D]) ensureMap(v any) (any, error) {
	b, err := oj.Marshal(v)
	if err != nil {
		return nil, err
	}

	data, err := oj.Parse(b)
	if err != nil {
		return nil, err
	}

	return data, nil
}

func (r *__node[D]) setnode(v __node_interface) error {
	data, err := r.ensureMap(v)
	if err != nil {
		return err
	}

	return r.setv(data)
}

func (r *__node[D]) setv(incomingv any) error {
	return r.setvb(incomingv, nil)
}

func (r *__node[D]) setvb(incomingv any, b []byte) error {
	r.ensureData()
	err := r.ensureWritable()
	if err != nil {
		return err
	}

	r._setjson = func(b []byte) {
		r._json = b
		r._jsonc = r._data._c.Load()
	}

	if node_is_root(r) {
		r.setdata(incomingv)
		if b != nil {
			r._setjson(b)
		}

		return nil
	}

	if is_setting_array_index(r) {
		return node_array_set(r, incomingv)
	} else {
		defer r._data._c.Add(1)
		return node_path(r).SetOne(r._data._data, incomingv)
	}
}

func (r *__node[D]) setdata(v any) {
	r._data._data = v
	r._data._c.Add(1)
}

func (r *__node[D]) setMerge(incoming any) error {
	data, err := r.ensureMap(incoming)
	if err != nil {
		return err
	}

	arr, ok := r.result().(map[string]any)
	if !ok {
		arr = make(map[string]any)
	}

	for k, v := range data.(map[string]any) {
		arr[k] = v
	}

	return r.setv(arr)
}

func (r __node[D]) copy() __node[D] {
	b, err := r.MarshalJSON()
	if err != nil {
		panic(err)
	}

	return __node[D]{_data: r.newData(b)}
}

func (r __node[D]) defaultJson() []byte {
	var d D
	s := d.typeDefaultJson()
	if len(s) == 0 {
		return []byte("{}")
	}
	return s
}

type AllOf struct {
	__node[AllOf]
}

func (r AllOf) Set(v *AllOf) error {
	return r.setnode(v)
}

func (r *AllOf) GetBilling_address() *AllofDefinitionsAddress {
	return &AllofDefinitionsAddress{
		__node: node_get[AllOf, AllofDefinitionsAddress](&r.__node, "billing_address"),
	}
}

func (r *AllOf) GetShipping_address() *AllofShipping_address {
	return &AllofShipping_address{
		__node: node_get[AllOf, AllofShipping_address](&r.__node, "shipping_address"),
	}
}

func (r AllOf) Copy() *AllOf {
	return &AllOf{
		__node: r.copy(),
	}
}

func (r AllOf) typeDefaultJson() []byte {
	return []byte("{}")
}

type AllOfOneOf struct {
	__node[AllOfOneOf]
}

func (r AllOfOneOf) Set(v *AllOfOneOf) error {
	return r.setnode(v)
}

func (r *AllOfOneOf) GetData() *AllofoneofData {
	return &AllofoneofData{
		__node: node_get[AllOfOneOf, AllofoneofData](&r.__node, "data"),
	}
}

func (r AllOfOneOf) Copy() *AllOfOneOf {
	return &AllOfOneOf{
		__node: r.copy(),
	}
}

func (r AllOfOneOf) typeDefaultJson() []byte {
	return []byte("{}")
}

type AllofDefinitionsAddress struct {
	__node[AllofDefinitionsAddress]
}

func (r AllofDefinitionsAddress) Set(v *AllofDefinitionsAddress) error {
	return r.setnode(v)
}

func (r *AllofDefinitionsAddress) GetCity() *String {
	return &String{
		__node: node_get[AllofDefinitionsAddress, String](&r.__node, "city"),
	}
}

func (r AllofDefinitionsAddress) Copy() *AllofDefinitionsAddress {
	return &AllofDefinitionsAddress{
		__node: r.copy(),
	}
}

func (r AllofDefinitionsAddress) typeDefaultJson() []byte {
	return []byte("{}")
}

type AllofShipping_address struct {
	__node[AllofShipping_address]
}

func (r AllofShipping_address) Set(v *AllofShipping_address) error {
	return r.setMerge(v)
}

func (r *AllofShipping_address) GetCity() *String {
	return &String{
		__node: node_get[AllofShipping_address, String](&r.__node, "city"),
	}
}

func (r *AllofShipping_address) GetType() *String {
	return &String{
		__node: node_get[AllofShipping_address, String](&r.__node, "type"),
	}
}

func (r AllofShipping_address) Copy() *AllofShipping_address {
	return &AllofShipping_address{
		__node: r.copy(),
	}
}

func (r AllofShipping_address) typeDefaultJson() []byte {
	return []byte("{}")
}

type AllofoneofData struct {
	__node[AllofoneofData]
}

func (r AllofoneofData) Set(v *AllofoneofData) error {
	return r.setMerge(v)
}

func (r *AllofoneofData) AsAllOf0OneOf0() *AllofoneofDataAllOf0OneOf0 {
	return &AllofoneofDataAllOf0OneOf0{
		__node: node_get_as[AllofoneofData, AllofoneofDataAllOf0OneOf0](&r.__node),
	}
}

func (r *AllofoneofData) AsAllOf0OneOf1() *AllofoneofDataAllOf0OneOf1 {
	return &AllofoneofDataAllOf0OneOf1{
		__node: node_get_as[AllofoneofData, AllofoneofDataAllOf0OneOf1](&r.__node),
	}
}

func (r *AllofoneofData) AsAllOf3OneOf1() *AllofoneofDataAllOf3OneOf1 {
	return &AllofoneofDataAllOf3OneOf1{
		__node: node_get_as[AllofoneofData, AllofoneofDataAllOf3OneOf1](&r.__node),
	}
}

func (r *AllofoneofData) AsDNestedTitle1() *DNestedTitle1 {
	return &DNestedTitle1{
		__node: node_get_as[AllofoneofData, DNestedTitle1](&r.__node),
	}
}

func (r *AllofoneofData) AsNamedOneOf0() *AllofoneofDataAllOf2OneOf0 {
	return &AllofoneofDataAllOf2OneOf0{
		__node: node_get_as[AllofoneofData, AllofoneofDataAllOf2OneOf0](&r.__node),
	}
}

func (r *AllofoneofData) AsNamedOneOf1() *AllofoneofDataAllOf2OneOf1 {
	return &AllofoneofDataAllOf2OneOf1{
		__node: node_get_as[AllofoneofData, AllofoneofDataAllOf2OneOf1](&r.__node),
	}
}

func (r *AllofoneofData) GetB() *String {
	return &String{
		__node: node_get[AllofoneofData, String](&r.__node, "b"),
	}
}

func (r AllofoneofData) Copy() *AllofoneofData {
	return &AllofoneofData{
		__node: r.copy(),
	}
}

func (r AllofoneofData) typeDefaultJson() []byte {
	return []byte("{}")
}

type AllofoneofDataAllOf0OneOf0 struct {
	__node[AllofoneofDataAllOf0OneOf0]
}

func (r AllofoneofDataAllOf0OneOf0) Set(v *AllofoneofDataAllOf0OneOf0) error {
	return r.setnode(v)
}

func (r *AllofoneofDataAllOf0OneOf0) GetA1() *String {
	return &String{
		__node: node_get[AllofoneofDataAllOf0OneOf0, String](&r.__node, "a1"),
	}
}

func (r AllofoneofDataAllOf0OneOf0) Copy() *AllofoneofDataAllOf0OneOf0 {
	return &AllofoneofDataAllOf0OneOf0{
		__node: r.copy(),
	}
}

func (r AllofoneofDataAllOf0OneOf0) typeDefaultJson() []byte {
	return []byte("{}")
}

type AllofoneofDataAllOf0OneOf1 struct {
	__node[AllofoneofDataAllOf0OneOf1]
}

func (r AllofoneofDataAllOf0OneOf1) Set(v *AllofoneofDataAllOf0OneOf1) error {
	return r.setnode(v)
}

func (r *AllofoneofDataAllOf0OneOf1) GetA2() *String {
	return &String{
		__node: node_get[AllofoneofDataAllOf0OneOf1, String](&r.__node, "a2"),
	}
}

func (r AllofoneofDataAllOf0OneOf1) Copy() *AllofoneofDataAllOf0OneOf1 {
	return &AllofoneofDataAllOf0OneOf1{
		__node: r.copy(),
	}
}

func (r AllofoneofDataAllOf0OneOf1) typeDefaultJson() []byte {
	return []byte("{}")
}

type AllofoneofDataAllOf2OneOf0 struct {
	__node[AllofoneofDataAllOf2OneOf0]
}

func (r AllofoneofDataAllOf2OneOf0) Set(v *AllofoneofDataAllOf2OneOf0) error {
	return r.setnode(v)
}

func (r *AllofoneofDataAllOf2OneOf0) GetC1() *String {
	return &String{
		__node: node_get[AllofoneofDataAllOf2OneOf0, String](&r.__node, "c1"),
	}
}

func (r AllofoneofDataAllOf2OneOf0) Copy() *AllofoneofDataAllOf2OneOf0 {
	return &AllofoneofDataAllOf2OneOf0{
		__node: r.copy(),
	}
}

func (r AllofoneofDataAllOf2OneOf0) typeDefaultJson() []byte {
	return []byte("{}")
}

type AllofoneofDataAllOf2OneOf1 struct {
	__node[AllofoneofDataAllOf2OneOf1]
}

func (r AllofoneofDataAllOf2OneOf1) Set(v *AllofoneofDataAllOf2OneOf1) error {
	return r.setnode(v)
}

func (r *AllofoneofDataAllOf2OneOf1) GetC2() *String {
	return &String{
		__node: node_get[AllofoneofDataAllOf2OneOf1, String](&r.__node, "c2"),
	}
}

func (r AllofoneofDataAllOf2OneOf1) Copy() *AllofoneofDataAllOf2OneOf1 {
	return &AllofoneofDataAllOf2OneOf1{
		__node: r.copy(),
	}
}

func (r AllofoneofDataAllOf2OneOf1) typeDefaultJson() []byte {
	return []byte("{}")
}

type AllofoneofDataAllOf3OneOf1 struct {
	__node[AllofoneofDataAllOf3OneOf1]
}

func (r AllofoneofDataAllOf3OneOf1) Set(v *AllofoneofDataAllOf3OneOf1) error {
	return r.setnode(v)
}

func (r *AllofoneofDataAllOf3OneOf1) GetD2() *String {
	return &String{
		__node: node_get[AllofoneofDataAllOf3OneOf1, String](&r.__node, "d2"),
	}
}

func (r AllofoneofDataAllOf3OneOf1) Copy() *AllofoneofDataAllOf3OneOf1 {
	return &AllofoneofDataAllOf3OneOf1{
		__node: r.copy(),
	}
}

func (r AllofoneofDataAllOf3OneOf1) typeDefaultJson() []byte {
	return []byte("{}")
}

type ArrayArray struct {
	__node[ArrayArray]
}

func (r ArrayArray) Set(v *ArrayArray) error {
	return r.setnode(v)
}

func (r *ArrayArray) GetTopfield1() *ArrayTopfield1 {
	return &ArrayTopfield1{
		__node: node_get[ArrayArray, ArrayTopfield1](&r.__node, "topfield1"),
	}
}

func (r *ArrayArray) GetTopfield2() *ArrayTopfield2 {
	return &ArrayTopfield2{
		__node: node_get[ArrayArray, ArrayTopfield2](&r.__node, "topfield2"),
	}
}

func (r ArrayArray) Copy() *ArrayArray {
	return &ArrayArray{
		__node: r.copy(),
	}
}

func (r ArrayArray) typeDefaultJson() []byte {
	return []byte("{}")
}

type ArrayDefinitionsDef1 struct {
	__node[ArrayDefinitionsDef1]
}

func (r ArrayDefinitionsDef1) Set(v *ArrayDefinitionsDef1) error {
	return r.setnode(v)
}

func (r *ArrayDefinitionsDef1) GetField1() *String {
	return &String{
		__node: node_get[ArrayDefinitionsDef1, String](&r.__node, "field1"),
	}
}

func (r *ArrayDefinitionsDef1) GetField2() *String {
	return &String{
		__node: node_get[ArrayDefinitionsDef1, String](&r.__node, "field2"),
	}
}

func (r ArrayDefinitionsDef1) Copy() *ArrayDefinitionsDef1 {
	return &ArrayDefinitionsDef1{
		__node: r.copy(),
	}
}

func (r ArrayDefinitionsDef1) typeDefaultJson() []byte {
	return []byte("{}")
}

type ArrayTopfield1 struct {
	__node[ArrayTopfield1]
}

func (r ArrayTopfield1) Set(v *ArrayTopfield1) error {
	return r.setnode(v)
}

func (r *ArrayTopfield1) Append(v *ArrayDefinitionsDef1) error {
	return node_array_append_node(&r.__node, &v.__node)
}

func (r *ArrayTopfield1) At(i int) *ArrayDefinitionsDef1 {
	return &ArrayDefinitionsDef1{
		__node: node_at[ArrayTopfield1, ArrayDefinitionsDef1](&r.__node, i),
	}
}

func (r ArrayTopfield1) Clear() error {
	return r.set([]byte("[]"))
}

func (r ArrayTopfield1) Len() int {
	return node_array_len(&r.__node)
}

func (r ArrayTopfield1) Range() func(yield func(int, *ArrayDefinitionsDef1) bool) {
	return node_array_range[*ArrayDefinitionsDef1](&r)
}

func (r ArrayTopfield1) Copy() *ArrayTopfield1 {
	return &ArrayTopfield1{
		__node: r.copy(),
	}
}

func (r ArrayTopfield1) typeDefaultJson() []byte {
	return []byte("[]")
}

type ArrayTopfield2 struct {
	__node[ArrayTopfield2]
}

func (r ArrayTopfield2) Value() []string {
	return node_value_struct[[]string](&r.__node)
}
func (r *ArrayTopfield2) Append(v string) error {
	return node_array_append(&r.__node, v)
}

func (r *ArrayTopfield2) At(i int) *String {
	return &String{
		__node: node_at[ArrayTopfield2, String](&r.__node, i),
	}
}

func (r *ArrayTopfield2) Set(v []string) error {
	return r.setv(v)
}

func (r ArrayTopfield2) Clear() error {
	return r.set([]byte("[]"))
}

func (r ArrayTopfield2) Len() int {
	return node_array_len(&r.__node)
}

func (r ArrayTopfield2) Range() func(yield func(int, *String) bool) {
	return node_array_range[*String](&r)
}

func (r ArrayTopfield2) Copy() *ArrayTopfield2 {
	return &ArrayTopfield2{
		__node: r.copy(),
	}
}

func (r ArrayTopfield2) typeDefaultJson() []byte {
	return []byte("[]")
}

type ArraysSchemaArraysSchema struct {
	__node[ArraysSchemaArraysSchema]
}

func (r ArraysSchemaArraysSchema) Set(v *ArraysSchemaArraysSchema) error {
	return r.setnode(v)
}

func (r *ArraysSchemaArraysSchema) GetFruits() *ArraysSchemaFruits {
	return &ArraysSchemaFruits{
		__node: node_get[ArraysSchemaArraysSchema, ArraysSchemaFruits](&r.__node, "fruits"),
	}
}

func (r *ArraysSchemaArraysSchema) GetVegetables() *ArraysSchemaVegetables {
	return &ArraysSchemaVegetables{
		__node: node_get[ArraysSchemaArraysSchema, ArraysSchemaVegetables](&r.__node, "vegetables"),
	}
}

func (r ArraysSchemaArraysSchema) Copy() *ArraysSchemaArraysSchema {
	return &ArraysSchemaArraysSchema{
		__node: r.copy(),
	}
}

func (r ArraysSchemaArraysSchema) typeDefaultJson() []byte {
	return []byte("{}")
}

type ArraysSchemaDefsVeggie struct {
	__node[ArraysSchemaDefsVeggie]
}

func (r ArraysSchemaDefsVeggie) Set(v *ArraysSchemaDefsVeggie) error {
	return r.setnode(v)
}

func (r *ArraysSchemaDefsVeggie) GetVeggieLike() *Bool {
	return &Bool{
		__node: node_get[ArraysSchemaDefsVeggie, Bool](&r.__node, "veggieLike"),
	}
}

func (r *ArraysSchemaDefsVeggie) GetVeggieName() *String {
	return &String{
		__node: node_get[ArraysSchemaDefsVeggie, String](&r.__node, "veggieName"),
	}
}

func (r ArraysSchemaDefsVeggie) Copy() *ArraysSchemaDefsVeggie {
	return &ArraysSchemaDefsVeggie{
		__node: r.copy(),
	}
}

func (r ArraysSchemaDefsVeggie) typeDefaultJson() []byte {
	return []byte("{}")
}

type ArraysSchemaFruits struct {
	__node[ArraysSchemaFruits]
}

func (r ArraysSchemaFruits) Value() []string {
	return node_value_struct[[]string](&r.__node)
}
func (r *ArraysSchemaFruits) Append(v string) error {
	return node_array_append(&r.__node, v)
}

func (r *ArraysSchemaFruits) At(i int) *String {
	return &String{
		__node: node_at[ArraysSchemaFruits, String](&r.__node, i),
	}
}

func (r *ArraysSchemaFruits) Set(v []string) error {
	return r.setv(v)
}

func (r ArraysSchemaFruits) Clear() error {
	return r.set([]byte("[]"))
}

func (r ArraysSchemaFruits) Len() int {
	return node_array_len(&r.__node)
}

func (r ArraysSchemaFruits) Range() func(yield func(int, *String) bool) {
	return node_array_range[*String](&r)
}

func (r ArraysSchemaFruits) Copy() *ArraysSchemaFruits {
	return &ArraysSchemaFruits{
		__node: r.copy(),
	}
}

func (r ArraysSchemaFruits) typeDefaultJson() []byte {
	return []byte("[]")
}

type ArraysSchemaVegetables struct {
	__node[ArraysSchemaVegetables]
}

func (r ArraysSchemaVegetables) Set(v *ArraysSchemaVegetables) error {
	return r.setnode(v)
}

func (r *ArraysSchemaVegetables) Append(v *ArraysSchemaDefsVeggie) error {
	return node_array_append_node(&r.__node, &v.__node)
}

func (r *ArraysSchemaVegetables) At(i int) *ArraysSchemaDefsVeggie {
	return &ArraysSchemaDefsVeggie{
		__node: node_at[ArraysSchemaVegetables, ArraysSchemaDefsVeggie](&r.__node, i),
	}
}

func (r ArraysSchemaVegetables) Clear() error {
	return r.set([]byte("[]"))
}

func (r ArraysSchemaVegetables) Len() int {
	return node_array_len(&r.__node)
}

func (r ArraysSchemaVegetables) Range() func(yield func(int, *ArraysSchemaDefsVeggie) bool) {
	return node_array_range[*ArraysSchemaDefsVeggie](&r)
}

func (r ArraysSchemaVegetables) Copy() *ArraysSchemaVegetables {
	return &ArraysSchemaVegetables{
		__node: r.copy(),
	}
}

func (r ArraysSchemaVegetables) typeDefaultJson() []byte {
	return []byte("[]")
}

type Bool struct {
	__node[Bool]
}

func (r *Bool) Value() bool {
	return node_value_bool(r)
}
func (r *Bool) Set(v bool) error {
	return r.setv(v)
}

func (r Bool) Copy() *Bool {
	return &Bool{
		__node: r.copy(),
	}
}

func (r Bool) typeDefaultJson() []byte {
	return []byte("")
}

type DNestedTitle1 struct {
	__node[DNestedTitle1]
}

func (r DNestedTitle1) Set(v *DNestedTitle1) error {
	return r.setnode(v)
}

func (r *DNestedTitle1) GetD1() *String {
	return &String{
		__node: node_get[DNestedTitle1, String](&r.__node, "d1"),
	}
}

func (r DNestedTitle1) Copy() *DNestedTitle1 {
	return &DNestedTitle1{
		__node: r.copy(),
	}
}

func (r DNestedTitle1) typeDefaultJson() []byte {
	return []byte("{}")
}

type Float64 struct {
	__node[Float64]
}

func (r *Float64) Value() float64 {
	return node_value_float(r)
}
func (r *Float64) Set(v float64) error {
	return r.setv(v)
}

func (r Float64) Copy() *Float64 {
	return &Float64{
		__node: r.copy(),
	}
}

func (r Float64) typeDefaultJson() []byte {
	return []byte("")
}

type Int64 struct {
	__node[Int64]
}

func (r *Int64) Value() int64 {
	return node_value_int(r)
}
func (r *Int64) Set(v int64) error {
	return r.setv(v)
}

func (r Int64) Copy() *Int64 {
	return &Int64{
		__node: r.copy(),
	}
}

func (r Int64) typeDefaultJson() []byte {
	return []byte("")
}

type LargeFileItems struct {
	__node[LargeFileItems]
}

func (r LargeFileItems) Set(v *LargeFileItems) error {
	return r.setnode(v)
}

func (r *LargeFileItems) GetActor() *LargeFileItemsActor {
	return &LargeFileItemsActor{
		__node: node_get[LargeFileItems, LargeFileItemsActor](&r.__node, "actor"),
	}
}

func (r *LargeFileItems) GetId() *String {
	return &String{
		__node: node_get[LargeFileItems, String](&r.__node, "id"),
	}
}

func (r *LargeFileItems) GetType() *String {
	return &String{
		__node: node_get[LargeFileItems, String](&r.__node, "type"),
	}
}

func (r LargeFileItems) Copy() *LargeFileItems {
	return &LargeFileItems{
		__node: r.copy(),
	}
}

func (r LargeFileItems) typeDefaultJson() []byte {
	return []byte("{}")
}

type LargeFileItemsActor struct {
	__node[LargeFileItemsActor]
}

func (r LargeFileItemsActor) Set(v *LargeFileItemsActor) error {
	return r.setnode(v)
}

func (r *LargeFileItemsActor) GetAvatar_url() *String {
	return &String{
		__node: node_get[LargeFileItemsActor, String](&r.__node, "avatar_url"),
	}
}

func (r *LargeFileItemsActor) GetGravatar_id() *String {
	return &String{
		__node: node_get[LargeFileItemsActor, String](&r.__node, "gravatar_id"),
	}
}

func (r *LargeFileItemsActor) GetId() *Float64 {
	return &Float64{
		__node: node_get[LargeFileItemsActor, Float64](&r.__node, "id"),
	}
}

func (r *LargeFileItemsActor) GetLogin() *String {
	return &String{
		__node: node_get[LargeFileItemsActor, String](&r.__node, "login"),
	}
}

func (r *LargeFileItemsActor) GetUrl() *String {
	return &String{
		__node: node_get[LargeFileItemsActor, String](&r.__node, "url"),
	}
}

func (r LargeFileItemsActor) Copy() *LargeFileItemsActor {
	return &LargeFileItemsActor{
		__node: r.copy(),
	}
}

func (r LargeFileItemsActor) typeDefaultJson() []byte {
	return []byte("{}")
}

type LargeFileLargeFile struct {
	__node[LargeFileLargeFile]
}

func (r LargeFileLargeFile) Set(v *LargeFileLargeFile) error {
	return r.setnode(v)
}

func (r *LargeFileLargeFile) Append(v *LargeFileItems) error {
	return node_array_append_node(&r.__node, &v.__node)
}

func (r *LargeFileLargeFile) At(i int) *LargeFileItems {
	return &LargeFileItems{
		__node: node_at[LargeFileLargeFile, LargeFileItems](&r.__node, i),
	}
}

func (r LargeFileLargeFile) Clear() error {
	return r.set([]byte("[]"))
}

func (r LargeFileLargeFile) Len() int {
	return node_array_len(&r.__node)
}

func (r LargeFileLargeFile) Range() func(yield func(int, *LargeFileItems) bool) {
	return node_array_range[*LargeFileItems](&r)
}

func (r LargeFileLargeFile) Copy() *LargeFileLargeFile {
	return &LargeFileLargeFile{
		__node: r.copy(),
	}
}

func (r LargeFileLargeFile) typeDefaultJson() []byte {
	return []byte("[]")
}

type NestedarraysField1 struct {
	__node[NestedarraysField1]
}

func (r NestedarraysField1) Set(v *NestedarraysField1) error {
	return r.setnode(v)
}

func (r *NestedarraysField1) Append(v *NestedarraysField1Items) error {
	return node_array_append_node(&r.__node, &v.__node)
}

func (r *NestedarraysField1) At(i int) *NestedarraysField1Items {
	return &NestedarraysField1Items{
		__node: node_at[NestedarraysField1, NestedarraysField1Items](&r.__node, i),
	}
}

func (r NestedarraysField1) Clear() error {
	return r.set([]byte("[]"))
}

func (r NestedarraysField1) Len() int {
	return node_array_len(&r.__node)
}

func (r NestedarraysField1) Range() func(yield func(int, *NestedarraysField1Items) bool) {
	return node_array_range[*NestedarraysField1Items](&r)
}

func (r NestedarraysField1) Copy() *NestedarraysField1 {
	return &NestedarraysField1{
		__node: r.copy(),
	}
}

func (r NestedarraysField1) typeDefaultJson() []byte {
	return []byte("[]")
}

type NestedarraysField1Items struct {
	__node[NestedarraysField1Items]
}

func (r NestedarraysField1Items) Set(v *NestedarraysField1Items) error {
	return r.setnode(v)
}

func (r *NestedarraysField1Items) GetField2() *NestedarraysField1ItemsField2 {
	return &NestedarraysField1ItemsField2{
		__node: node_get[NestedarraysField1Items, NestedarraysField1ItemsField2](&r.__node, "field2"),
	}
}

func (r NestedarraysField1Items) Copy() *NestedarraysField1Items {
	return &NestedarraysField1Items{
		__node: r.copy(),
	}
}

func (r NestedarraysField1Items) typeDefaultJson() []byte {
	return []byte("{}")
}

type NestedarraysField1ItemsField2 struct {
	__node[NestedarraysField1ItemsField2]
}

func (r NestedarraysField1ItemsField2) Set(v *NestedarraysField1ItemsField2) error {
	return r.setnode(v)
}

func (r *NestedarraysField1ItemsField2) Append(v *SomeTitle) error {
	return node_array_append_node(&r.__node, &v.__node)
}

func (r *NestedarraysField1ItemsField2) At(i int) *SomeTitle {
	return &SomeTitle{
		__node: node_at[NestedarraysField1ItemsField2, SomeTitle](&r.__node, i),
	}
}

func (r NestedarraysField1ItemsField2) Clear() error {
	return r.set([]byte("[]"))
}

func (r NestedarraysField1ItemsField2) Len() int {
	return node_array_len(&r.__node)
}

func (r NestedarraysField1ItemsField2) Range() func(yield func(int, *SomeTitle) bool) {
	return node_array_range[*SomeTitle](&r)
}

func (r NestedarraysField1ItemsField2) Copy() *NestedarraysField1ItemsField2 {
	return &NestedarraysField1ItemsField2{
		__node: r.copy(),
	}
}

func (r NestedarraysField1ItemsField2) typeDefaultJson() []byte {
	return []byte("[]")
}

type NestedarraysNestedarrays struct {
	__node[NestedarraysNestedarrays]
}

func (r NestedarraysNestedarrays) Set(v *NestedarraysNestedarrays) error {
	return r.setnode(v)
}

func (r *NestedarraysNestedarrays) GetField1() *NestedarraysField1 {
	return &NestedarraysField1{
		__node: node_get[NestedarraysNestedarrays, NestedarraysField1](&r.__node, "field1"),
	}
}

func (r NestedarraysNestedarrays) Copy() *NestedarraysNestedarrays {
	return &NestedarraysNestedarrays{
		__node: r.copy(),
	}
}

func (r NestedarraysNestedarrays) typeDefaultJson() []byte {
	return []byte("{}")
}

type OneOf struct {
	__node[OneOf]
}

func (r OneOf) Set(v *OneOf) error {
	return r.setnode(v)
}

func (r *OneOf) GetData() *OneofData {
	return &OneofData{
		__node: node_get[OneOf, OneofData](&r.__node, "data"),
	}
}

func (r OneOf) Copy() *OneOf {
	return &OneOf{
		__node: r.copy(),
	}
}

func (r OneOf) typeDefaultJson() []byte {
	return []byte("{}")
}

type OneOfRootObj struct {
	__node[OneOfRootObj]
}

func (r OneOfRootObj) Set(v *OneOfRootObj) error {
	return r.setnode(v)
}

func (r *OneOfRootObj) AsPerson() *Person {
	return &Person{
		__node: node_get_as[OneOfRootObj, Person](&r.__node),
	}
}

func (r *OneOfRootObj) AsVehicle() *Vehicle {
	return &Vehicle{
		__node: node_get_as[OneOfRootObj, Vehicle](&r.__node),
	}
}

func (r OneOfRootObj) Copy() *OneOfRootObj {
	return &OneOfRootObj{
		__node: r.copy(),
	}
}

func (r OneOfRootObj) typeDefaultJson() []byte {
	return []byte("{}")
}

type OneofData struct {
	__node[OneofData]
}

func (r OneofData) Set(v *OneofData) error {
	return r.setnode(v)
}

func (r *OneofData) AsPerson() *Person {
	return &Person{
		__node: node_get_as[OneofData, Person](&r.__node),
	}
}

func (r *OneofData) AsVehicle() *Vehicle {
	return &Vehicle{
		__node: node_get_as[OneofData, Vehicle](&r.__node),
	}
}

func (r OneofData) Copy() *OneofData {
	return &OneofData{
		__node: r.copy(),
	}
}

func (r OneofData) typeDefaultJson() []byte {
	return []byte("{}")
}

type Person struct {
	__node[Person]
}

func (r Person) Set(v *Person) error {
	return r.setnode(v)
}

func (r *Person) GetFirstName() *String {
	return &String{
		__node: node_get[Person, String](&r.__node, "firstName"),
	}
}

func (r *Person) GetLastName() *String {
	return &String{
		__node: node_get[Person, String](&r.__node, "lastName"),
	}
}

func (r *Person) GetSport() *String {
	return &String{
		__node: node_get[Person, String](&r.__node, "sport"),
	}
}

func (r Person) Copy() *Person {
	return &Person{
		__node: r.copy(),
	}
}

func (r Person) typeDefaultJson() []byte {
	return []byte("{}")
}

type SomeTitle struct {
	__node[SomeTitle]
}

func (r SomeTitle) Set(v *SomeTitle) error {
	return r.setnode(v)
}

func (r *SomeTitle) GetField3() *String {
	return &String{
		__node: node_get[SomeTitle, String](&r.__node, "field3"),
	}
}

func (r SomeTitle) Copy() *SomeTitle {
	return &SomeTitle{
		__node: r.copy(),
	}
}

func (r SomeTitle) typeDefaultJson() []byte {
	return []byte("{}")
}

type String struct {
	__node[String]
}

func (r *String) Value() string {
	return node_value_string(r)
}
func (r *String) Set(v string) error {
	return r.setv(v)
}

func (r String) Copy() *String {
	return &String{
		__node: r.copy(),
	}
}

func (r String) typeDefaultJson() []byte {
	return []byte("")
}

type Vehicle struct {
	__node[Vehicle]
}

func (r Vehicle) Set(v *Vehicle) error {
	return r.setnode(v)
}

func (r *Vehicle) GetBrand() *String {
	return &String{
		__node: node_get[Vehicle, String](&r.__node, "brand"),
	}
}

func (r *Vehicle) GetPrice() *Int64 {
	return &Int64{
		__node: node_get[Vehicle, Int64](&r.__node, "price"),
	}
}

func (r Vehicle) Copy() *Vehicle {
	return &Vehicle{
		__node: r.copy(),
	}
}

func (r Vehicle) typeDefaultJson() []byte {
	return []byte("{}")
}
